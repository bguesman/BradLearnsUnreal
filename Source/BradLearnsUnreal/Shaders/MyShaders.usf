#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"

SCREEN_PASS_TEXTURE_VIEWPORT(ViewParams)
SamplerState InputSampler;
Texture2D SceneColor;
Texture2D SceneDepth;
float4 Scattering;
float4 Extinction;
float4 MaxDistAndDensity;

float2 PosToUV(float2 Pos) {
	float2 ViewportUV = ((Pos - ViewParams_ViewportMin.xy) * ViewParams_ViewportSizeInverse.xy);
	return ViewportUV * ViewParams_UVViewportSize + ViewParams_UVViewportMin;
}

float4 RecolorMainPS(float4 SvPosition : SV_POSITION) : SV_Target0 {
	float2 UV = PosToUV(SvPosition.xy);
	float4 color = Texture2DSample(SceneColor, InputSampler, UV);

	// Depth
	float deviceDepth = Texture2DSample(SceneDepth, InputSampler, UV).r;
	float sceneDepth = ConvertFromDeviceZ(deviceDepth);

	// Height-based density
	// TODO: height seems not to work here
	// float3 worldPos = SvPositionToTranslatedWorld(SvPosition);
	float density = MaxDistAndDensity.y;// * saturate((-worldPos.z / 1000.0));

	// Convert to optical depth
	float3 opticalDepth = min(sceneDepth, MaxDistAndDensity.x) * density * 1e-5f * Extinction.xyz;

	float3 transmittance = exp(-opticalDepth);

	const float3 lightColor = 1;
	
	float3 finalColor = color.xyz * transmittance + (1 - transmittance) * lightColor * Scattering.xyz;

	return float4(finalColor, 1);
}
